


#---------------------------------| Preprocessing >
import h5py
import numpy as np
from matplotlib import pyplot as plt
from scipy.optimize import curve_fit
from os import listdir
from os.path import isfile, join
import re
import matplotlib.pyplot as plt
import matplotlib.path as mpath
import numpy as np
#---------------------------------| Function Defition >


'''
Q_10 = {'Qi': [202612.2425905491, 193924.03289174012, 188469.15364090045, 178123.2583201873, 167753.91817578307, 172411.6717611795, 178661.74789964894, 177630.11445711082, 175037.4232696356, 160646.06860186788, 145471.70667166333], 'Qe': [107057.00320378886, 108585.99992594041, 110738.15998600578, 113622.52462148434, 118484.11055391851, 116310.1971888505, 115318.75502300453, 115785.97367821906, 118856.7973188017, 126217.65947856398, 134767.93447497228], 'Qtot': [70045.8950920462, 69609.04676477835, 69753.39952531272, 69371.4030759129, 69439.31900034785, 69455.20134352148, 70083.05017915455, 70095.25581127674, 70788.69226863215, 70682.93687403877, 69957.70245948473]}
Q_n10 =  {'Qi':[],'Qe':[],'Qtot':[]}
Q_n20 ={'Qi':[],'Qe':[],'Qtot':[]}
'''
Q_10 = {'Qi': [202612.2425905491, 193924.03289174012, 188469.15364090045, 178123.2583201873, 167753.91817578307, 172411.6717611795, 178661.74789964894, 177630.11445711082, 175037.4232696356, 160646.06860186788, 145471.70667166333], 'Qe': [107057.00320378886, 108585.99992594041, 110738.15998600578, 113622.52462148434, 118484.11055391851, 116310.1971888505, 115318.75502300453, 115785.97367821906, 118856.7973188017, 126217.65947856398, 134767.93447497228], 'Qtot': [70045.8950920462, 69609.04676477835, 69753.39952531272, 69371.4030759129, 69439.31900034785, 69455.20134352148, 70083.05017915455, 70095.25581127674, 70788.69226863215, 70682.93687403877, 69957.70245948473]}
Q_n10 =  {"Qi": [206258.31124047327, 186660.20418478167, 177674.72766419922, 205029.47701797573, 217029.3897399523], "Qe": [116311.07046747876, 116799.9600771074, 116899.94224261571, 107786.72398795444, 109892.69826017636], "Qtot": [74371.9842415609, 71844.37024805656, 70509.00000494867, 70646.77461610196, 72952.99435464699]}
Q_n20 = {"Qi": [81878.73688533086, 119918.61004838532, 119985.95608069024, 124558.454921841, 108934.06681395508, 78405.74394828612], "Qe": [123040.5540816178, 149759.59582970123, 149700.7518437603, 117624.91591140842, 95803.41018694406, 124589.13579634612], "Qtot": [49162.79529533899, 66594.04498346611, 66603.1632563944, 60496.2171260069, 50973.83849398259, 48121.92254442748]}

Q = {'Qi': Q_10['Qi'] + Q_n10['Qi'] + Q_n20['Qi'],
             'Qe': Q_10['Qe'] + Q_n10['Qe'] + Q_n20['Qe'],
             'Qtot': Q_10['Qtot'] + Q_n10['Qtot'] + Q_n20['Qtot'],}

powers_10 = list(np.linspace(10,-10, len(Q_10['Qi'])))
powers_n10 = list(np.linspace(-10,-20, len(Q_n10['Qi'])))
powers_n20 = list(np.linspace(-20,-30, len(Q_n20['Qi'])))

powers = powers_10 + powers_n10 + powers_n20

'''
Qes = [88924.412838431, 88794.40115792981, 88856.55224690217, 88659.44265008702, 88835.43513993235, 88991.2863986874, 89059.46673260415, 89006.84871364062, 88522.66990661739, 88599.01470835092, 89028.81420023396, 88851.6122923299, 89443.84935078396, 91196.31333481702, 93547.71814516888, 94675.5869747549, 94280.86783876394, 93121.59171605058, 90414.66756599638, 91914.11658656245, 89540.41312336737, 88750.88190608106, 88740.72999552704]
Qis = [347459.856558461, 349234.5500118214, 339598.66652621306, 340484.56495064386, 334828.93255714414, 348853.58292131126, 355707.3130634141, 377136.64668625384, 369951.91290429374, 350824.5401491194, 335512.832497929, 389381.04853294074, 365584.6939287697, 347458.2311704972, 338368.29977109714, 344886.7231286284, 356062.41491490544, 369828.5992808793, 285663.28056767036, 207088.12783295853, 118053.75030802541, 108896.28893543684, 112965.38521512784]
powers = np.linspace(10,-30, len(Qes))
'''

star = mpath.Path.unit_regular_star(6)
circle = mpath.Path.unit_circle()
# concatenate the circle with an internal cutout of the star
verts = np.concatenate([circle.vertices, star.vertices[::-1, ...]])
codes = np.concatenate([circle.codes, star.codes])
cut_star = mpath.Path(verts, codes)

def Plot_Q_vs_power(Qes, Qis, Qtots, powers):

    fig, ax = plt.subplots(1, 3)
    
    ax[0].set_ylabel('Qi')
    ax[0].set_xlabel('Power (dBm)')
    ax[0].plot(powers, Qis, marker=cut_star)

    ax[1].set_ylabel('Qe')
    ax[1].set_xlabel('Power (dBm)')
    ax[1].plot(powers, Qes, marker=cut_star)

    ax[2].set_ylabel('Qtot')
    ax[2].set_xlabel('Power (dBm)')
    ax[2].plot(powers, Qtots, marker=cut_star)
    fig.set_size_inches(12, 5)
    title = '\nPower Range: ' + '10dBm to -30dBm'
    fig.suptitle(title)
    
    fig.tight_layout()
    plt.show()


Plot_Q_vs_power(Q['Qe'], Q['Qi'], Q['Qtot'], powers)









